{"version":3,"sources":["components/DeliciousForm.js","components/DeliciousRecipes.js","App.js","components/Recipe.js","components/Router.js","serviceWorker.js","index.js"],"names":["DeliciousForm","props","react_default","a","createElement","onSubmit","getRecipe","style","marginBottom","className","type","name","DeliciousRecipes","recipes","map","recipe","key","recipe_id","width","height","src","image_url","alt","title","length","concat","substring","publisher","react_router_dom","to","pathname","state","API_KEY","App","_callee","e","recipeName","api_call","data","regenerator_default","wrap","_context","prev","next","target","elements","value","preventDefault","fetch","sent","json","_this","setState","stop","componentDidMount","localStorage","getItem","JSON","parse","componentDidUpdate","stringify","setItem","components_DeliciousForm","this","components_DeliciousRecipes","Component","Recipe","activeRecipe","req","res","location","href","source_url","textDecoration","color","React","Router","react_router","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","components_Router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c3f9255.chunk.js","sourcesContent":["import React from \"react\";\n\nconst DeliciousForm = props => (\n  <form onSubmit={props.getRecipe} style={{ marginBottom: \"2rem\" }}>\n    <input className=\"form__input\" type=\"text\" name=\"recipeName\" />\n    <button className=\"form__button\">Search</button>\n  </form>\n);\n\nexport default DeliciousForm;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst DeliciousRecipes = props => (\n  <div className=\"container\">\n    <div className=\"row\">\n      {props.recipes.map(recipe => {\n        return (\n          <div\n            className=\"col-md-4\"\n            key={recipe.recipe_id}\n            style={{ marginBottom: \"2rem\" }}\n          >\n            <div className=\"recipes__box\">\n              <img\n                style={{ width: \"100%\", height: \"220px\" }}\n                className=\"recipe__box-delicious_img\"\n                src={recipe.image_url}\n                alt={recipe.title}\n              />\n              <div className=\"recipe__text\">\n                <h5 className=\"recipes__title\">\n                  {recipe.title.length < 20\n                    ? `${recipe.title}`\n                    : `${recipe.title.substring(0, 25)}...`}\n                </h5>\n                <p className=\"recipes__subtitle\">\n                  Publisher:\n                  <span>{recipe.publisher}</span>\n                </p>\n              </div>\n              <button className=\"recipe_buttons\">\n                <Link\n                  to={{\n                    pathname: `/recipe/${recipe.recipe_id}`,\n                    state: { recipe: recipe.title }\n                  }}\n                >\n                  View Recipe\n                </Link>\n              </button>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  </div>\n);\n\nexport default DeliciousRecipes;\n","import React, { Component } from \"react\";\n\nimport \"./Delicious.css\";\nimport DeliciousForm from \"./components/DeliciousForm\";\nimport DeliciousRecipes from \"./components/DeliciousRecipes\";\n\n//const API_KEY = \"88644a2a377f68746cc0267e10914cf2\";\nconst API_KEY = \"f13fd82da7f916744adb750f28b4b4f6\";\n\nclass App extends Component {\n  state = {\n    recipes: []\n  };\n\n  getRecipe = async e => {\n    const recipeName = e.target.elements.recipeName.value;\n    e.preventDefault();\n    const api_call = await fetch(\n      `https://cors-anywhere.herokuapp.com/https://www.food2fork.com/api/search?key=${API_KEY}&q=${recipeName}`\n    );\n    const data = await api_call.json();\n    this.setState({ recipes: data.recipes });\n  };\n\n  componentDidMount = () => {\n    const json = localStorage.getItem(\"recipes\");\n    const recipes = JSON.parse(json);\n    this.setState({ recipes });\n  };\n\n  componentDidUpdate = () => {\n    const recipes = JSON.stringify(this.state.recipes);\n    localStorage.setItem(\"recipes\", recipes);\n  };\n\n  render() {\n    return (\n      <div className=\"App-delicious\">\n        <header className=\"App-delicious-header\">\n          <h1 className=\"App-delicious-title\">Delicious Recipes</h1>\n        </header>\n        <DeliciousForm getRecipe={this.getRecipe} />\n        <DeliciousRecipes recipes={this.state.recipes} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n//const API_KEY = \"88644a2a377f68746cc0267e10914cf2\";\nconst API_KEY = \"f13fd82da7f916744adb750f28b4b4f6\";\n\nclass Recipe extends React.Component {\n  state = {\n    activeRecipe: []\n  };\n\n  componentDidMount = async () => {\n    const title = this.props.location.state.recipe;\n    const req = await fetch(\n      `https://cors-anywhere.herokuapp.com/https://www.food2fork.com/api/search?key=${API_KEY}&q=${title}`\n    );\n    const res = await req.json();\n    this.setState({ activeRecipe: res.recipes[0] });\n  };\n\n  render() {\n    const recipe = this.state.activeRecipe;\n    return (\n      <div className=\"container\">\n        {this.state.activeRecipe.length !== 0 && (\n          <div className=\"active-recipe\">\n            <img\n              src={recipe.image_url}\n              alt={recipe.title}\n              style={{ height: \"500px !important\" }}\n            />\n            <h3 className=\"active-recipe__title\">{recipe.title}</h3>\n            <h4 className=\"active-recipe__publisher\">\n              Publisher: <span>{recipe.publisher}</span>\n            </h4>\n            <p className=\"active-recipe__website\">\n              Recipe\n              <span>\n                <a href={recipe.source_url}>Click here</a>\n              </span>\n            </p>\n            <button className=\"active-recipe__button\">\n              <Link style={{ textDecoration: \"none\", color: \"black\" }} to=\"/\">\n                Delicious Recipes\n              </Link>\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Recipe;\n","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\n\nimport App from \"../App\";\nimport Recipe from \"./Recipe\";\n\nconst Router = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route exact path=\"/\" component={App} />\n      <Route path=\"/recipe/:id\" component={Recipe} />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Router;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport \"./index.css\";\nimport Router from \"./components/Router\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Router />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}